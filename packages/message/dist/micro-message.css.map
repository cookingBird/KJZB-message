{"version":3,"file":"micro-message.css","mappings":"AAwEC,mBAEC,WAAY,CADZ,UAED","sources":["webpack://@gislife/micro-message/./src/microApp.vue"],"sourcesContent":["<template>\r\n<iframe\r\n\t:data-app-code=\"microAppCode\"\r\n\t:src=\"buildSrc(src)\"\r\n\t:id=\"id\"\r\n\tclass=\"gislife-micro-app\"\r\n\ttitle=\"\"\r\n>\r\n</iframe>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport {\r\n\tonMounted,\r\n\tonBeforeUnmount,\r\n\twatchEffect,\r\n\tcomputed,\r\n\tdefineProps,\r\n\tdefineEmits,\r\n\tdefineOptions\r\n} from \"vue\";\r\nimport { deepCloneBaseType } from './util';\r\nimport { connector } from './index';\r\nimport * as Qs from 'qs';\r\ndefineOptions({\r\n\tname: 'MicroApp',\r\n})\r\n\r\nconst props = defineProps<{\r\n\tsrc: string,\r\n\tmicroAppCode: string,\r\n\tstate?: Record<string, unknown>,\r\n\tquery?: Record<string, unknown>,\r\n}>()\r\nconst emit = defineEmits();\r\n\r\nconst id = computed(() => ('gislife-' + props.microAppCode));\r\nconst passiveState = computed(() => (deepCloneBaseType(props.state)));\r\nconst buildSrc = computed(() => (src: string) => {\r\n\tconst query = Qs.stringify(props.query);\r\n\tif (src.indexOf('?') === -1) {\r\n\t\treturn src + '?' + query + '&microAppCode=' + props.microAppCode;\r\n\t} else {\r\n\t\treturn src + '&' + query + '&microAppCode=' + props.microAppCode;\r\n\t}\r\n})\r\n\r\n\r\nwatchEffect(() => {\r\n\tconst state = passiveState.value;\r\n\tconnector.$send({\r\n\t\ttarget: props.microAppCode,\r\n\t\ttype: 'setState',\r\n\t\tdata: state\r\n\t});\r\n})\r\n\r\nlet cancel: Function;\r\nonMounted(() => {\r\n\tcancel = connector.$on(({ msg }) => {\r\n\t\temit(msg.type, msg.data)\r\n\t})\r\n})\r\n\r\nonBeforeUnmount(() => {\r\n\tcancel?.();\r\n\tconnector.unRegisterApp(props.microAppCode);\r\n})\r\n\r\n</script>\r\n\r\n<style lang=\"css\">\r\n\t.gislife-micro-app {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t}\r\n</style>\r\n"],"names":[],"sourceRoot":""}